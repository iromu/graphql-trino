/*
 * Copyright 2025-2025 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.iromu.trino.graphql.schema;

import graphql.schema.GraphQLSchema;
import graphql.schema.idl.SchemaPrinter;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * REST controller that exposes the GraphQL schema as a GraphQL SDL (Schema Definition
 * Language) file.
 *
 * <p>
 * This endpoint allows clients to retrieve the schema in the standard GraphQL SDL format,
 * which includes: scalar types, schema definitions, and directives.
 * </p>
 *
 * <p>
 * The schema is dynamically generated by the {@link GraphQLSchema} object and printed
 * using the {@link SchemaPrinter}.
 * </p>
 *
 * @author Ivan Rodriguez
 */
@RestController
public class GraphQLSchemaEndpoint {

	private final GraphQLSchema graphQLSchema;

	private final SchemaPrinter schemaPrinter;

	/**
	 * Constructor that initializes the GraphQL schema and the schema printer.
	 * @param graphQLSchema the dynamically generated {@link GraphQLSchema} that will be
	 * exposed
	 */
	public GraphQLSchemaEndpoint(GraphQLSchema graphQLSchema) {
		this.graphQLSchema = graphQLSchema;
		this.schemaPrinter = new SchemaPrinter(SchemaPrinter.Options.defaultOptions()
			.includeScalarTypes(true)
			.includeSchemaDefinition(true)
			.includeDirectives(true));
	}

	/**
	 * Exposes the GraphQL schema in SDL format.
	 *
	 * <p>
	 * This endpoint prints the current GraphQL schema as a text-based SDL. It can be
	 * accessed through a GET request to the {@code /schema.graphqls} path. The resulting
	 * response is a text containing the full schema definition, including scalar types,
	 * schema definitions, and directives.
	 * </p>
	 * @return the GraphQL schema in SDL format as a plain text string
	 */
	@GetMapping(value = "/schema.graphqls", produces = "text/plain")
	public String getSchema() {
		return schemaPrinter.print(graphQLSchema);
	}

}
