/*
 * Copyright 2025-2025 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.iromu.trino.graphql.schema;

import graphql.schema.GraphQLSchema;
import org.springframework.boot.autoconfigure.graphql.GraphQlSourceBuilderCustomizer;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

/**
 * Spring configuration class for setting up GraphQL with a dynamically generated schema.
 *
 * <p>
 * This configuration integrates with {@link GraphQLDynamicSchemaService} to build the
 * schema and registers it with the Spring GraphQL context.
 * </p>
 *
 * <p>
 * It also enables customization of the {@code GraphQlSourceBuilder} for federation
 * support or other GraphQL schema customizations if needed.
 * </p>
 *
 * @author Ivan Rodriguez
 */
@Configuration
public class GraphQLConfig {

	private final GraphQLDynamicSchemaService schemaService;

	/**
	 * Constructor for injecting the dynamic schema service.
	 * @param schemaService the service responsible for generating the GraphQL schema
	 */
	public GraphQLConfig(GraphQLDynamicSchemaService schemaService) {
		this.schemaService = schemaService;
	}

	/**
	 * Creates a {@link GraphQLSchema} bean using the custom dynamic schema service.
	 * @return a dynamically generated {@link GraphQLSchema}
	 */
	@Bean
	public GraphQLSchema schema() {
		return schemaService.generateSchema();
	}

	/**
	 * Customizes the {@link GraphQlSourceBuilder} to use the provided schema. This hook
	 * is essential for enabling support for advanced GraphQL features such as federation
	 * or schema transformations.
	 * @param schema the {@link GraphQLSchema} generated by the application
	 * @return a {@link GraphQlSourceBuilderCustomizer} that sets the schema on the
	 * builder
	 */
	@Bean
	public GraphQlSourceBuilderCustomizer federationTransform(GraphQLSchema schema) {
		return builder -> builder.configureGraphQl(graphQLBuilder -> graphQLBuilder.schema(schema));
	}

}
